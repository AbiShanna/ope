## Dockerfile for constructing the base Open Education Effort (OPE)
## container.  This container contains everything required for authoring OPE courses
## Well is should anyway ;-)

ARG FROM_REG
ARG FROM_IMAGE
ARG FROM_TAG
FROM ${FROM_REG}${FROM_IMAGE}${FROM_TAG}

ARG ADDITIONAL_DISTRO_PACKAGES
ARG PYTHON_PREREQ_VERSIONS
ARG PYTHON_INSTALL_PACKAGES
ARG JUPYTER_ENABLE_EXTENSIONS
ARG UNMIN
ARG BUILD_SRC
ARG MOUNT_DIR
LABEL name="s2i-odh-ope-base" \
      version="latest" \
      summary="Open Education Effort Customized Jupyter Notebook Source-to-Image for Python 3.9 applications." \
      description="Notebook image based on Source-to-Image.These images can be used in OpenDatahub JupterHub." \
      io.k8s.description="Notebook image based on Source-to-Image.These images can be used in OpenDatahub JupterHub." \
      io.k8s.display-name="Custom Notebook Python 3.9 S2I" \
      io.openshift.expose-services="8888:http" \
      io.openshift.tags="python,python39" \
      io.openshift.s2i.build.commit.ref="container" \
      io.openshift.s2i.build.source-location="https://github.com/OPEFFORT/ope"

ENV XDG_CACHE_HOME="/opt/app-root/src/.cache" \
    THAMOS_RUNTIME_ENVIRONMENT="" \
    UPGRADE_PIP_TO_LATEST="1" \
    WEB_CONCURRENCY="1" \
    THOTH_ADVISE="0" \
    THOTH_ERROR_FALLBACK="1" \
    THOTH_DRY_RUN="1" \
    THAMOS_DEBUG="0" \
    THAMOS_VERBOSE="1" \
    THOTH_PROVENANCE_CHECK="0"

# Fix: https://github.com/hadolint/hadolint/wiki/DL4006
# Fix: https://github.com/koalaman/shellcheck/wiki/SC3014
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Add a "USER root" statement followed by RUN statements to install system packages using apt-get,
# change file permissions, etc.

# install linux packages that we require for systems classes
USER root


RUN yum -y install ${ADDITIONAL_DISTRO_PACKAGES}

# Now that distro packages are installed lets install the python packages we want
# This was inspired by
# https://github.com/jupyter/docker-stacks/blob/b186ce5fea6aa9af23fb74167dca52908cb28d71/scipy-notebook/Dockerfile

# build-essential
RUN yum update --assumeyes --nobest --setopt=tsflags=nodocs && \
    yum --assumeyes clean all && \
    rm -rf /var/cache/dnf


# Installing some system packages from source

RUN for pkg in ${BUILD_SRC}; do \
     if [[ -n "${pkg}" ]] ; then \
     pkg_name=$(echo "$pkg" | cut -d'=' -f1) ; pkg_url=$(echo "$pkg" | cut -d'=' -f2) ;  cd ${MOUNT_DIR} ; \
     wget ${pkg_url} ; mkdir ${pkg_name} ; tar xf ${pkg_name}*.tar.* -C ${pkg_name} --strip-components 1 ; cd ${pkg_name} ; \
     if [ ${pkg_name} == 'gdb'] ; then \
     export PATH=$PATH:${MOUNT_DIR}/texinfo/bin ; \
     ./configure --prefix=${MOUNT_DIR}/${pkg_name} CFLAGS="-I${MOUNT_DIR}/gmp/include  -L${MOUNT_DIR}/gmp/lib" CXXFLAGS="-I${MOUNT_DIR}/gmp/include -L${MOUNT_DIR}/gmp/lib" ;\
     else ./configure --prefix=${MOUNT_DIR}/${pkg_name} ; \
     fi ;\
     make ; make install ; cd ${MOUNT_DIR} ; rm ${pkg_name}*.tar.* ; \
    fi; \
    done;


